/* 포함되는 파일 및 라이브러리*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <dirent.h>

/* 정의되는 구조체*/
typedef struct hiList {		// history linked list 저장할 구조체
	char cmd_name[100];	// 커맨드 저장
	struct hiList *link;	// 다음 노드를 가리키는 link
}hiList;

typedef struct OPlist{		// opcode linked list 저장할 구조체
	int opcode;		// opcode 저장
	char inst_name[10];	// mnemonic 저장
	char form[5];		// format 저장
	struct OPlist *link;	// 다음 노드를 가리키는 link
} OPlist;

typedef struct symbol{		// label 저장할 linkedlist용 구조체
	char name[100];		// label명
	int locctr;		// location counter
	struct symbol *link;	// 다음 노드 link
}symbol;

typedef struct objlist{		// object code를 저장한 linkedlist 용 구조체
	char objcode[100];	// objcode
	int loc;		// location
	int flag;		// 줄바꿈 필요한지 flag
	int mflag;		// modification 필요한 경우 flag
	struct objlist *link;	// 다음 노드 가리키는 link
}objlist;

/* global 변수 */
hiList *hiHead = NULL;		// hiList head
OPlist *OPhead[20];		// OPlist head 배열
symbol *symhead[26];		// symlist head 배열
objlist *objhead = NULL;	// objlist head
unsigned char memory[1048576];	// 16 X 65536 가상메모리
int dumpend  = -1;		// dump에서 마지막으로 저장된 end 값
int adr_start = 0;		// 프로그램 시작주소
int pro_length = 0;		// 프로그램 길이
int symflag = 0;		// symbol table flag


/* 함수 원형 */

/*---------------------proj 1----------------------------*/

/*-----------------------------------------*/
/* 함수 : editcmd                          */
/* 목적 : 입력받은 커맨드를 명령어와       */
/*	  나머지로 나눈다                  */
/* 리턴값 : 없음                           */
/*-----------------------------------------*/
void editcmd(char*, char*, char*);

/*-----------------------------------------*/
/* 함수 : help                             */
/* 목적 : 프로그램 상에서 사용할 수 있는   */
/*	  명령어들을 출력한다              */
/* 리턴값 : 없음                           */
/*-----------------------------------------*/
void help();

/*-----------------------------------------*/
/* 함수 : dir                              */
/* 목적 : 현재 디렉토리 내 파일들을        */
/*        출력한다                         */
/* 리턴값 : 없음                           */
/*-----------------------------------------*/
void dir();

/*-----------------------------------------*/
/* 함수 : history                          */
/* 목적 : history linked list에 저장된     */
/*        정보를 차례로 출력               */
/* 리턴값 : 없음                           */
/*-----------------------------------------*/
void history();

/*-----------------------------------------*/
/* 함수 : add_list                         */
/* 목적 : 입력받은 instruction을 history   */
/*        linked list에 저장               */
/* 리턴값 : 없음                           */
/*-----------------------------------------*/
void add_list(char*);

/*-----------------------------------------*/
/* 함수 : dump                             */
/* 목적 : 가상 메모리에 저장된 정보를 특정 */ 
/*        범위 만큼 출력                   */
/* 리턴값 : 에러발생 시 0, 정상종료 시 1   */
/*-----------------------------------------*/
int dump(char*);

/*-----------------------------------------*/
/* 함수 : edit                             */
/* 목적 : 가상 메모리의 특정 주소에 저장된 */
/*        값을 치환한다                    */
/* 리턴값 : 에러발생 시 0, 정상종료 시 1   */
/*-----------------------------------------*/
int edit(char*);

/*-----------------------------------------*/
/* 함수 : fill                             */
/* 목적 : 가상 메모리에서 원하는 범위만큼의*/
/*        값을 특정 값으로 치환한다        */
/* 리턴값 : 에러발생 시 0, 정상종료 시     */
/*-----------------------------------------*/
int fill(char*);

/*-----------------------------------------*/
/* 함수 : reset                            */
/* 목적 : 가상 메모리의 모든 값을 0으로    */
/*        초기화                           */
/* 리턴값 : 없음                           */
/*-----------------------------------------*/
void reset();

/*-----------------------------------------*/
/* 함수 : makeOPlist                       */
/* 목적 : opcode 파일로부터 hash table 생성*/
/* 리턴값 : 없음                           */
/*-----------------------------------------*/
void makeOPlist();

/*-----------------------------------------*/
/* 함수 : hashFunction                     */
/* 목적 : 입력받은 string을 암호화         */
/* 리턴값 : 암호화된 int                   */
/*-----------------------------------------*/
int hashFunction(char*);

/*-----------------------------------------*/
/* 함수 : opcode                           */
/* 목적 : 입력받은 mnemonic에 해당하는     */
/*        opcode 출력                      */
/* 리턴값 : 에러발생 시 0, 정상종료 시 1   */
/*-----------------------------------------*/
int opcode(char*);

/*-----------------------------------------*/
/* 함수 : opcodelist                       */
/* 목적 : hashtable에 저장된 opcode list를 */
/*        차례로 출력                      */
/* 리턴값 : 없음                           */
/*-----------------------------------------*/
void opcodelist();

/*---------------------proj 2----------------------------*/

/*-----------------------------------------*/
/* 함수 : getfilename                      */
/* 목적 : 문자열의 제일 뒤에 있는 공백들을 */
/*        제거                             */
/* 리턴값 : 없음                           */
/*-----------------------------------------*/
void getfilename(char*);

/*-----------------------------------------*/
/* 함수 : type                             */
/* 목적 : 파일 안의 내용을 그대로 출력     */
/* 리턴값 : 에러발생 시 0, 정상종료 시 1   */
/*-----------------------------------------*/
int type(char*);

/*-----------------------------------------*/
/* 함수 : assemble                         */
/* 목적 : 입력받은 .asm 파일을 어셈블      */
/* 리턴값 : 에러발생 시 0, 정상종료 시 1   */
/*-----------------------------------------*/
int assemble(char*);

/*-----------------------------------------*/
/* 함수 : pass_1                           */
/* 목적 : location counter 계산하여        */
/*	  intermediate 파일에 저장         */
/* 리턴값 : 에러발생 시 0, 정상종료 시 1   */
/*-----------------------------------------*/
int pass_1(char*);

/*-----------------------------------------*/
/* 함수 : pass_2                           */
/* 목적 : intermediate 파일에서 어셈블하여 */
/*        obj, lst 파일 생성               */
/* 리턴값 : 에러발생 시 0, 정상종료 시 1   */
/*-----------------------------------------*/
int pass_2(char*);

/*-----------------------------------------*/
/* 함수 : ZtoAhash                         */
/* 목적 : 알파벳 내림차순으로 저장하기 위한*/
/*        hash function                    */
/* 리턴값 : index number                   */
/*-----------------------------------------*/
int ZtoAhash(char*);

/*-----------------------------------------*/
/* 함수 : symbolcmd                        */
/* 목적 : symbol table 내용 출력           */
/* 리턴값 : 에러발생 시 0, 정상종료 시 1   */
/*-----------------------------------------*/
int symbolcmd();

/*-----------------------------------------*/
/* 함수 : add_objlist                      */
/* 목적 : object code를 linked list에 저장 */
/* 리턴값 : 없음                           */
/*-----------------------------------------*/
void add_objlist(char*, int, int);
